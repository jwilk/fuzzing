Turn neomutt(1) into a non-interactive program.

$ export AFL_STDIN=$(printf '\7\nhqq')
$ afl-fuzz [options] -- /path/to/neomutt -R -f @@

--- a/main.c
+++ b/main.c
@@ -444,6 +444,7 @@
       exit(0);
   }
 
+#ifndef __AFL_COMPILER
   /* Check for a batch send. */
   if (!isatty(0) || !STAILQ_EMPTY(&queries) || !STAILQ_EMPTY(&alias_queries) ||
       dump_variables || batch_mode)
@@ -451,6 +452,7 @@
     set_option(OPT_NO_CURSES);
     sendflags = SENDBATCH;
   }
+#endif
 
   /* Always create the mutt_windows because batch mode has some shared code
    * paths that end up referencing them. */
@@ -535,6 +537,7 @@
 #ifdef USE_NNTP
     skip |= mx_is_nntp(fpath);
 #endif
+#ifndef __AFL_COMPILER
     if (!skip && stat(fpath, &sb) == -1 && errno == ENOENT)
     {
       snprintf(msg2, sizeof(msg2), _("%s does not exist. Create it?"), Folder);
@@ -544,11 +547,33 @@
           mutt_error(_("Can't create %s: %s."), Folder, strerror(errno));
       }
     }
+#endif
   }
 
   if (batch_mode)
     exit(0);
 
+#ifdef __AFL_HAVE_MANUAL_CONTROL
+   __AFL_INIT();
+#endif
+#ifdef __AFL_COMPILER
+  if (!isatty(0))
+  {
+    int pipefd[2];
+    if (pipe(pipefd))
+      abort();
+    const char *input = getenv("AFL_STDIN");
+    if (input == NULL)
+      abort();
+    if (dprintf(pipefd[1], "%s", input) != strlen(input))
+      abort();
+    if (dup2(pipefd[0], 0))
+      abort();
+    close(pipefd[0]);
+    close(pipefd[1]);
+  }
+#endif
+
   if (sendflags & SENDPOSTPONED)
   {
     if (!option(OPT_NO_CURSES))
--- a/mx.c
+++ b/mx.c
@@ -22,6 +22,11 @@
  */
 
 #include "config.h"
+
+#ifdef __AFL_COMPILER
+#undef USE_DOTLOCK
+#endif
+
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
--- a/init.c
+++ b/init.c
@@ -4210,6 +4210,7 @@
     SpoolFile = safe_strdup(buffer);
   }
 
+#ifndef __AFL_COMPILER
   if ((p = getenv("MAILCAPS")))
     MailcapPath = safe_strdup(p);
   else
@@ -4219,6 +4220,7 @@
         "~/.mailcap:" PKGDATADIR "/mailcap:" SYSCONFDIR
         "/mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap");
   }
+#endif
 
   Tmpdir = safe_strdup((p = getenv("TMPDIR")) ? p : "/tmp");
 
