#!/usr/bin/python3

# Copyright Â© 2015-2017 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections
import contextlib
import os
import resource
import shlex
import subprocess as ipc

def quote_args(args, atat=None):
    if atat is not None:
        args = (
            x if x != '@@' else atat
            for x in args
        )
    return ' '.join(
        map(shlex.quote, args)
    )

def run_gdb(options, path):
    if '@@' in options.arguments:
        target_args = quote_args(options.arguments, path)
        gdb_run_command = 'run {args} < /dev/null > /dev/null 2> /dev/null'.format(
            args=target_args
        )
    else:
        target_args = quote_args(options.arguments)
        gdb_run_command = 'run {args} < {path} > /dev/null 2> /dev/null'.format(
            args=target_args,
            path=shlex.quote(path)
        )
    gdb_cmdline = ['gdb', '--batch', '--quiet',
        '--ex', gdb_run_command,
        '--ex', 'backtrace',
        options.command
    ]
    gdb = ipc.Popen(gdb_cmdline,
        stdout=ipc.PIPE,
        stderr=ipc.PIPE,
    )
    (stdout, stderr) = gdb.communicate()
    return (
        stdout.decode('ASCII', 'replace'),
        stderr.decode('ASCII', 'replace'),
    )

def run_raw(options, path):
    cmdline = [options.command]
    with contextlib.ExitStack() as stack:
        if '@@' in options.arguments:
            cmdline += [
                x if x != '@@' else path
                for x in options.arguments
            ]
            stdin = ipc.DEVNULL
        else:
            cmdline += options.arguments
            stdin = open(path, 'rb')
            stack.enter_context(stdin)
        target = ipc.Popen(cmdline,
            stdin=stdin,
            stdout=ipc.PIPE,
            stderr=ipc.PIPE,
        )
        (stdout, stderr) = target.communicate()
        return (
            stdout.decode('ASCII', 'replace'),
            stderr.decode('ASCII', 'replace'),
        )

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-G', '--no-gdb', dest='gdb', action='store_false', help="don\'t use GDB")
    ap.add_argument('-i', metavar='INPUT-FILE', nargs='+', required=True)
    ap.add_argument('-m', type=int, default=100, metavar='N')
    ap.add_argument('command', metavar='COMMAND')
    ap.add_argument('arguments', nargs='*', metavar='ARG')
    options = ap.parse_args()
    mem_limit = options.m << 20
    resource.setrlimit(resource.RLIMIT_AS, [mem_limit, mem_limit])
    if 'ASAN_OPTIONS' not in os.environ:
        os.environ['ASAN_OPTIONS'] = (
            'abort_on_error=1:'
            'detect_leaks=0:'
            'symbolize=0:'
            'allocator_may_return_null=1'
        )
    crashdata = collections.defaultdict(set)
    run = run_gdb if options.gdb else run_raw
    for path in options.i:
        [stdout, stderr] = run(options, path)
        crashdata[(stdout, stderr)].add(path)
    for (stdout, stderr), paths in sorted(crashdata.items()):
        for path in sorted(paths):
            print(path)
        for line in stdout.split('\n'):
            print('|', line)
        for line in stderr.split('\n'):
            print('#', line)
        print()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
